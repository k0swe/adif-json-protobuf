// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: adif.proto

// This protocol buffer definition represents amateur radio contacts. It includes the fields defined
// by ADIF v3.1.0 while restructuring them semantically. Developers using this protobuf schema
// should be aware of the field mappings, validation and deprecation policies from the parent
// specification.

package adifpb

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UploadStatus int32

const (
	UploadStatus_UNKNOWN UploadStatus = 0
	// the QSO has been uploaded to, and accepted by, the online service
	UploadStatus_UPLOAD_COMPLETE UploadStatus = 1
	// do not upload the QSO to the online service
	UploadStatus_DO_NOT_UPLOAD UploadStatus = 2
	// the QSO has been modified since being uploaded to the online service
	UploadStatus_MODIFIED_AFTER_UPLOAD UploadStatus = 3
)

// Enum value maps for UploadStatus.
var (
	UploadStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "UPLOAD_COMPLETE",
		2: "DO_NOT_UPLOAD",
		3: "MODIFIED_AFTER_UPLOAD",
	}
	UploadStatus_value = map[string]int32{
		"UNKNOWN":               0,
		"UPLOAD_COMPLETE":       1,
		"DO_NOT_UPLOAD":         2,
		"MODIFIED_AFTER_UPLOAD": 3,
	}
)

func (x UploadStatus) Enum() *UploadStatus {
	p := new(UploadStatus)
	*p = x
	return p
}

func (x UploadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_adif_proto_enumTypes[0].Descriptor()
}

func (UploadStatus) Type() protoreflect.EnumType {
	return &file_adif_proto_enumTypes[0]
}

func (x UploadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadStatus.Descriptor instead.
func (UploadStatus) EnumDescriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{0}
}

type Adif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Qsos   []*Qso  `protobuf:"bytes,2,rep,name=qsos,proto3" json:"qsos,omitempty"`
}

func (x *Adif) Reset() {
	*x = Adif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adif) ProtoMessage() {}

func (x *Adif) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adif.ProtoReflect.Descriptor instead.
func (*Adif) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{0}
}

func (x *Adif) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Adif) GetQsos() []*Qso {
	if x != nil {
		return x.Qsos
	}
	return nil
}

// metadata about the ADIF content
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifies the version of ADIF used in this file in the format X.Y.Z
	AdifVersion string `protobuf:"bytes,1,opt,name=adif_version,json=adifVersion,proto3" json:"adif_version,omitempty"`
	// identifies the UTC date and time that the file was created
	CreatedTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	// identifies the name of the logger, converter, or utility that created or processed this ADIF
	// file
	ProgramId string `protobuf:"bytes,3,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	// identifies the version of the logger, converter, or utility that created or processed this ADIF
	// file
	ProgramVersion string `protobuf:"bytes,4,opt,name=program_version,json=programVersion,proto3" json:"program_version,omitempty"` // TODO: protobuf extensions for user defined fields?
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetAdifVersion() string {
	if x != nil {
		return x.AdifVersion
	}
	return ""
}

func (x *Header) GetCreatedTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedTimestamp
	}
	return nil
}

func (x *Header) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *Header) GetProgramVersion() string {
	if x != nil {
		return x.ProgramVersion
	}
	return ""
}

// Data about one radio contact
type Qso struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggingStation   *Station     `protobuf:"bytes,1,opt,name=logging_station,json=loggingStation,proto3" json:"logging_station,omitempty"`
	ContactedStation *Station     `protobuf:"bytes,2,opt,name=contacted_station,json=contactedStation,proto3" json:"contacted_station,omitempty"`
	Propagation      *Propagation `protobuf:"bytes,3,opt,name=propagation,proto3" json:"propagation,omitempty"`
	// logging station's transmit band
	Band string `protobuf:"bytes,4,opt,name=band,proto3" json:"band,omitempty"`
	// in a split frequency QSO, the logging station's receiving band
	BandRx string `protobuf:"bytes,5,opt,name=band_rx,json=bandRx,proto3" json:"band_rx,omitempty"`
	// logging station's transmit frequency in Megahertz
	Freq float64 `protobuf:"fixed64,6,opt,name=freq,proto3" json:"freq,omitempty"`
	// in a split frequency QSO, the logging station's receiving frequency in Megahertz
	FreqRx float64 `protobuf:"fixed64,7,opt,name=freq_rx,json=freqRx,proto3" json:"freq_rx,omitempty"`
	// QSO Mode
	Mode string `protobuf:"bytes,8,opt,name=mode,proto3" json:"mode,omitempty"`
	// QSO Submode
	Submode string `protobuf:"bytes,9,opt,name=submode,proto3" json:"submode,omitempty"`
	// the distance between the logging station and the contacted station
	DistanceKm uint32 `protobuf:"varint,10,opt,name=distance_km,json=distanceKm,proto3" json:"distance_km,omitempty"`
	// date and time the QSO started
	TimeOn *timestamp.Timestamp `protobuf:"bytes,11,opt,name=time_on,json=timeOn,proto3" json:"time_on,omitempty"`
	// date and time the QSO ended
	TimeOff *timestamp.Timestamp `protobuf:"bytes,12,opt,name=time_off,json=timeOff,proto3" json:"time_off,omitempty"`
	// indicates whether the QSO was random or scheduled
	Random bool `protobuf:"varint,13,opt,name=random,proto3" json:"random,omitempty"`
	// signal report from the contacted station
	RstReceived string `protobuf:"bytes,14,opt,name=rst_received,json=rstReceived,proto3" json:"rst_received,omitempty"`
	// signal report sent to the contacted station
	RstSent string `protobuf:"bytes,15,opt,name=rst_sent,json=rstSent,proto3" json:"rst_sent,omitempty"`
	// indicates that the QSO information pertains to an SWL report
	Swl bool `protobuf:"varint,16,opt,name=swl,proto3" json:"swl,omitempty"`
	// indicates whether the QSO was complete from the perspective of the logging station
	Complete string `protobuf:"bytes,17,opt,name=complete,proto3" json:"complete,omitempty"`
	// comment field for QSO (recommended use: information of interest to the contacted station's
	// operator)
	Comment string `protobuf:"bytes,18,opt,name=comment,proto3" json:"comment,omitempty"`
	// QSO notes (recommended use: information of interest to the logging station's operator)
	Notes   string       `protobuf:"bytes,19,opt,name=notes,proto3" json:"notes,omitempty"`
	Contest *ContestData `protobuf:"bytes,20,opt,name=contest,proto3" json:"contest,omitempty"`
	// TODO: Award message type
	// the list of awards submitted to a sponsor
	AwardSubmitted []string `protobuf:"bytes,21,rep,name=award_submitted,json=awardSubmitted,proto3" json:"award_submitted,omitempty"`
	// the list of awards granted by a sponsor
	AwardGranted []string `protobuf:"bytes,22,rep,name=award_granted,json=awardGranted,proto3" json:"award_granted,omitempty"`
	// the list of credits sought for this QSO
	CreditSubmitted []*Credit `protobuf:"bytes,23,rep,name=credit_submitted,json=creditSubmitted,proto3" json:"credit_submitted,omitempty"`
	// the list of credits granted to this QSO
	CreditGranted []*Credit `protobuf:"bytes,24,rep,name=credit_granted,json=creditGranted,proto3" json:"credit_granted,omitempty"`
	// public encryption key
	PublicKey string `protobuf:"bytes,25,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// clublog.org upload status
	Clublog *Upload `protobuf:"bytes,26,opt,name=clublog,proto3" json:"clublog,omitempty"`
	// HRDLog.net upload status
	Hdrlog *Upload `protobuf:"bytes,27,opt,name=hdrlog,proto3" json:"hdrlog,omitempty"`
	// QRZ.com upload status
	Qrzcom *Upload `protobuf:"bytes,28,opt,name=qrzcom,proto3" json:"qrzcom,omitempty"`
	// eQSL.cc QSL status
	Eqsl *Qsl `protobuf:"bytes,29,opt,name=eqsl,proto3" json:"eqsl,omitempty"`
	// ARRL Logbook of the World QSL status
	Lotw *Qsl `protobuf:"bytes,30,opt,name=lotw,proto3" json:"lotw,omitempty"`
	// Physical QSL card status
	Card *Qsl `protobuf:"bytes,31,opt,name=card,proto3" json:"card,omitempty"`
	// Application-defined fields. Keys should follow ADIF 3.1.0 IV.A.4, i.e.
	// APP_{PROGRAMID}_{FIELDNAME}
	AppDefined map[string]string `protobuf:"bytes,32,rep,name=app_defined,json=appDefined,proto3" json:"app_defined,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Qso) Reset() {
	*x = Qso{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qso) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qso) ProtoMessage() {}

func (x *Qso) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qso.ProtoReflect.Descriptor instead.
func (*Qso) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{2}
}

func (x *Qso) GetLoggingStation() *Station {
	if x != nil {
		return x.LoggingStation
	}
	return nil
}

func (x *Qso) GetContactedStation() *Station {
	if x != nil {
		return x.ContactedStation
	}
	return nil
}

func (x *Qso) GetPropagation() *Propagation {
	if x != nil {
		return x.Propagation
	}
	return nil
}

func (x *Qso) GetBand() string {
	if x != nil {
		return x.Band
	}
	return ""
}

func (x *Qso) GetBandRx() string {
	if x != nil {
		return x.BandRx
	}
	return ""
}

func (x *Qso) GetFreq() float64 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *Qso) GetFreqRx() float64 {
	if x != nil {
		return x.FreqRx
	}
	return 0
}

func (x *Qso) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Qso) GetSubmode() string {
	if x != nil {
		return x.Submode
	}
	return ""
}

func (x *Qso) GetDistanceKm() uint32 {
	if x != nil {
		return x.DistanceKm
	}
	return 0
}

func (x *Qso) GetTimeOn() *timestamp.Timestamp {
	if x != nil {
		return x.TimeOn
	}
	return nil
}

func (x *Qso) GetTimeOff() *timestamp.Timestamp {
	if x != nil {
		return x.TimeOff
	}
	return nil
}

func (x *Qso) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

func (x *Qso) GetRstReceived() string {
	if x != nil {
		return x.RstReceived
	}
	return ""
}

func (x *Qso) GetRstSent() string {
	if x != nil {
		return x.RstSent
	}
	return ""
}

func (x *Qso) GetSwl() bool {
	if x != nil {
		return x.Swl
	}
	return false
}

func (x *Qso) GetComplete() string {
	if x != nil {
		return x.Complete
	}
	return ""
}

func (x *Qso) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Qso) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Qso) GetContest() *ContestData {
	if x != nil {
		return x.Contest
	}
	return nil
}

func (x *Qso) GetAwardSubmitted() []string {
	if x != nil {
		return x.AwardSubmitted
	}
	return nil
}

func (x *Qso) GetAwardGranted() []string {
	if x != nil {
		return x.AwardGranted
	}
	return nil
}

func (x *Qso) GetCreditSubmitted() []*Credit {
	if x != nil {
		return x.CreditSubmitted
	}
	return nil
}

func (x *Qso) GetCreditGranted() []*Credit {
	if x != nil {
		return x.CreditGranted
	}
	return nil
}

func (x *Qso) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Qso) GetClublog() *Upload {
	if x != nil {
		return x.Clublog
	}
	return nil
}

func (x *Qso) GetHdrlog() *Upload {
	if x != nil {
		return x.Hdrlog
	}
	return nil
}

func (x *Qso) GetQrzcom() *Upload {
	if x != nil {
		return x.Qrzcom
	}
	return nil
}

func (x *Qso) GetEqsl() *Qsl {
	if x != nil {
		return x.Eqsl
	}
	return nil
}

func (x *Qso) GetLotw() *Qsl {
	if x != nil {
		return x.Lotw
	}
	return nil
}

func (x *Qso) GetCard() *Qsl {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *Qso) GetAppDefined() map[string]string {
	if x != nil {
		return x.AppDefined
	}
	return nil
}

// QSO fields describing one of the stations involved in the contact
type Station struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operator's callsign
	OpCall string `protobuf:"bytes,1,opt,name=op_call,json=opCall,proto3" json:"op_call,omitempty"`
	// operator's name
	OpName string `protobuf:"bytes,2,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	// Maidenhead Grid Square
	GridSquare string `protobuf:"bytes,3,opt,name=grid_square,json=gridSquare,proto3" json:"grid_square,omitempty"`
	// latitude (north positive)
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// longitude (east positive)
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// transmitter power in watts
	Power float64 `protobuf:"fixed64,6,opt,name=power,proto3" json:"power,omitempty"`
	// description of the station's equipment
	Rig string `protobuf:"bytes,7,opt,name=rig,proto3" json:"rig,omitempty"`
	// description of the station antenna
	Antenna string `protobuf:"bytes,8,opt,name=antenna,proto3" json:"antenna,omitempty"`
	// antenna beam azimuth in degrees
	AntennaAzimuth int32 `protobuf:"varint,9,opt,name=antenna_azimuth,json=antennaAzimuth,proto3" json:"antenna_azimuth,omitempty"`
	// antenna beam elevation in degrees
	AntennaElevation int32 `protobuf:"varint,10,opt,name=antenna_elevation,json=antennaElevation,proto3" json:"antenna_elevation,omitempty"`
	// station owner's callsign
	OwnerCall string `protobuf:"bytes,11,opt,name=owner_call,json=ownerCall,proto3" json:"owner_call,omitempty"`
	// callsign used over the air, e.g. a club callsign
	StationCall string `protobuf:"bytes,12,opt,name=station_call,json=stationCall,proto3" json:"station_call,omitempty"`
	// the operator's age in years in the range 0 to 120 (inclusive)
	Age uint32 `protobuf:"varint,13,opt,name=age,proto3" json:"age,omitempty"`
	// indicates that the operator is now a Silent Key
	SilentKey bool `protobuf:"varint,14,opt,name=silent_key,json=silentKey,proto3" json:"silent_key,omitempty"`
	// preferred QSL route
	QslVia string `protobuf:"bytes,15,opt,name=qsl_via,json=qslVia,proto3" json:"qsl_via,omitempty"`
	// complete mailing address: full name, street address, city, postal code, and country
	Address string `protobuf:"bytes,16,opt,name=address,proto3" json:"address,omitempty"`
	// street
	Street string `protobuf:"bytes,17,opt,name=street,proto3" json:"street,omitempty"`
	// city
	City string `protobuf:"bytes,18,opt,name=city,proto3" json:"city,omitempty"`
	// postal code
	PostalCode string `protobuf:"bytes,19,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// Secondary Administrative Subdivision (e.g. US county, JA Gun)
	County string `protobuf:"bytes,20,opt,name=county,proto3" json:"county,omitempty"`
	// the code for the Primary Administrative Subdivision (e.g. US State, JA Island, VE Province)
	State string `protobuf:"bytes,21,opt,name=state,proto3" json:"state,omitempty"`
	// DXCC entity name
	Country string `protobuf:"bytes,22,opt,name=country,proto3" json:"country,omitempty"`
	// DXCC Entity Code
	Dxcc uint32 `protobuf:"varint,23,opt,name=dxcc,proto3" json:"dxcc,omitempty"`
	// continent
	Continent string `protobuf:"bytes,24,opt,name=continent,proto3" json:"continent,omitempty"`
	// email address
	Email string `protobuf:"bytes,25,opt,name=email,proto3" json:"email,omitempty"`
	// the station's website URL
	Web string `protobuf:"bytes,26,opt,name=web,proto3" json:"web,omitempty"`
	// CQ Zone in the range 1 to 40 (inclusive)
	CqZone uint32 `protobuf:"varint,27,opt,name=cq_zone,json=cqZone,proto3" json:"cq_zone,omitempty"`
	// ITU zone in the range 1 to 90 (inclusive)
	ItuZone uint32 `protobuf:"varint,28,opt,name=itu_zone,json=ituZone,proto3" json:"itu_zone,omitempty"`
	// DARC DOK (District Location Code)
	DarcDok string `protobuf:"bytes,29,opt,name=darc_dok,json=darcDok,proto3" json:"darc_dok,omitempty"`
	// FISTS CW Club member number
	Fists uint32 `protobuf:"varint,30,opt,name=fists,proto3" json:"fists,omitempty"`
	// FISTS CW Club Century Certificate (CC) number
	FistsCc uint32 `protobuf:"varint,31,opt,name=fists_cc,json=fistsCc,proto3" json:"fists_cc,omitempty"`
	// IOTA designator, in format CC-XXX
	Iota string `protobuf:"bytes,32,opt,name=iota,proto3" json:"iota,omitempty"`
	// IOTA Island Identifier
	IotaIslandId uint32 `protobuf:"varint,33,opt,name=iota_island_id,json=iotaIslandId,proto3" json:"iota_island_id,omitempty"`
	// WPX prefix
	Pfx string `protobuf:"bytes,34,opt,name=pfx,proto3" json:"pfx,omitempty"`
	// WAE or CQ entity contained within a DXCC entity
	Region string `protobuf:"bytes,35,opt,name=region,proto3" json:"region,omitempty"`
	// Straight Key Century Club (SKCC) member information
	Skcc string `protobuf:"bytes,36,opt,name=skcc,proto3" json:"skcc,omitempty"`
	// special interest activity or event
	Sig string `protobuf:"bytes,37,opt,name=sig,proto3" json:"sig,omitempty"`
	// special interest activity or event information
	SigInfo string `protobuf:"bytes,38,opt,name=sig_info,json=sigInfo,proto3" json:"sig_info,omitempty"`
	// International SOTA Reference
	SotaRef string `protobuf:"bytes,39,opt,name=sota_ref,json=sotaRef,proto3" json:"sota_ref,omitempty"`
	// Ten-Ten number
	TenTen uint32 `protobuf:"varint,40,opt,name=ten_ten,json=tenTen,proto3" json:"ten_ten,omitempty"`
	// two US counties in the case where the logging station is located on a border between two
	// counties, representing counties that the contacted station may claim for the CQ Magazine USA-CA
	// award program
	UsacaCounties string `protobuf:"bytes,41,opt,name=usaca_counties,json=usacaCounties,proto3" json:"usaca_counties,omitempty"`
	// UKSMG member number
	Uksmg uint32 `protobuf:"varint,42,opt,name=uksmg,proto3" json:"uksmg,omitempty"`
	// two or four adjacent Maidenhead grid locators, each four characters long, representing the
	// logging station's grid squares that the contacted station may claim for the ARRL VUCC award
	// program
	VuccGrids string `protobuf:"bytes,43,opt,name=vucc_grids,json=vuccGrids,proto3" json:"vucc_grids,omitempty"`
}

func (x *Station) Reset() {
	*x = Station{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Station) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Station) ProtoMessage() {}

func (x *Station) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Station.ProtoReflect.Descriptor instead.
func (*Station) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{3}
}

func (x *Station) GetOpCall() string {
	if x != nil {
		return x.OpCall
	}
	return ""
}

func (x *Station) GetOpName() string {
	if x != nil {
		return x.OpName
	}
	return ""
}

func (x *Station) GetGridSquare() string {
	if x != nil {
		return x.GridSquare
	}
	return ""
}

func (x *Station) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Station) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Station) GetPower() float64 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *Station) GetRig() string {
	if x != nil {
		return x.Rig
	}
	return ""
}

func (x *Station) GetAntenna() string {
	if x != nil {
		return x.Antenna
	}
	return ""
}

func (x *Station) GetAntennaAzimuth() int32 {
	if x != nil {
		return x.AntennaAzimuth
	}
	return 0
}

func (x *Station) GetAntennaElevation() int32 {
	if x != nil {
		return x.AntennaElevation
	}
	return 0
}

func (x *Station) GetOwnerCall() string {
	if x != nil {
		return x.OwnerCall
	}
	return ""
}

func (x *Station) GetStationCall() string {
	if x != nil {
		return x.StationCall
	}
	return ""
}

func (x *Station) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Station) GetSilentKey() bool {
	if x != nil {
		return x.SilentKey
	}
	return false
}

func (x *Station) GetQslVia() string {
	if x != nil {
		return x.QslVia
	}
	return ""
}

func (x *Station) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Station) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Station) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Station) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Station) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *Station) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Station) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Station) GetDxcc() uint32 {
	if x != nil {
		return x.Dxcc
	}
	return 0
}

func (x *Station) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *Station) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Station) GetWeb() string {
	if x != nil {
		return x.Web
	}
	return ""
}

func (x *Station) GetCqZone() uint32 {
	if x != nil {
		return x.CqZone
	}
	return 0
}

func (x *Station) GetItuZone() uint32 {
	if x != nil {
		return x.ItuZone
	}
	return 0
}

func (x *Station) GetDarcDok() string {
	if x != nil {
		return x.DarcDok
	}
	return ""
}

func (x *Station) GetFists() uint32 {
	if x != nil {
		return x.Fists
	}
	return 0
}

func (x *Station) GetFistsCc() uint32 {
	if x != nil {
		return x.FistsCc
	}
	return 0
}

func (x *Station) GetIota() string {
	if x != nil {
		return x.Iota
	}
	return ""
}

func (x *Station) GetIotaIslandId() uint32 {
	if x != nil {
		return x.IotaIslandId
	}
	return 0
}

func (x *Station) GetPfx() string {
	if x != nil {
		return x.Pfx
	}
	return ""
}

func (x *Station) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Station) GetSkcc() string {
	if x != nil {
		return x.Skcc
	}
	return ""
}

func (x *Station) GetSig() string {
	if x != nil {
		return x.Sig
	}
	return ""
}

func (x *Station) GetSigInfo() string {
	if x != nil {
		return x.SigInfo
	}
	return ""
}

func (x *Station) GetSotaRef() string {
	if x != nil {
		return x.SotaRef
	}
	return ""
}

func (x *Station) GetTenTen() uint32 {
	if x != nil {
		return x.TenTen
	}
	return 0
}

func (x *Station) GetUsacaCounties() string {
	if x != nil {
		return x.UsacaCounties
	}
	return ""
}

func (x *Station) GetUksmg() uint32 {
	if x != nil {
		return x.Uksmg
	}
	return 0
}

func (x *Station) GetVuccGrids() string {
	if x != nil {
		return x.VuccGrids
	}
	return ""
}

// QSO fields describing radio propagation conditions
type Propagation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// QSO propagation mode
	PropagationMode string `protobuf:"bytes,1,opt,name=propagation_mode,json=propagationMode,proto3" json:"propagation_mode,omitempty"`
	// the geomagnetic A index at the time of the QSO in the range 0 to 400 (inclusive)
	AIndex uint32 `protobuf:"varint,2,opt,name=a_index,json=aIndex,proto3" json:"a_index,omitempty"`
	// the geomagnetic K index at the time of the QSO in the range 0 to 9 (inclusive)
	KIndex uint32 `protobuf:"varint,3,opt,name=k_index,json=kIndex,proto3" json:"k_index,omitempty"`
	// the solar flux at the time of the QSO in the range 0 to 300 (inclusive).
	SolarFluxIndex uint32 `protobuf:"varint,4,opt,name=solar_flux_index,json=solarFluxIndex,proto3" json:"solar_flux_index,omitempty"`
	// the signal path
	AntPath string `protobuf:"bytes,5,opt,name=ant_path,json=antPath,proto3" json:"ant_path,omitempty"`
	// new EME "initial"
	ForceInit bool `protobuf:"varint,6,opt,name=force_init,json=forceInit,proto3" json:"force_init,omitempty"`
	// maximum length of meteor scatter bursts heard by the logging station, in seconds
	MaxBursts uint32 `protobuf:"varint,7,opt,name=max_bursts,json=maxBursts,proto3" json:"max_bursts,omitempty"`
	// For Meteor Scatter QSOs, the name of the meteor shower in progress
	MeteorShowerName string `protobuf:"bytes,8,opt,name=meteor_shower_name,json=meteorShowerName,proto3" json:"meteor_shower_name,omitempty"`
	// the number of meteor scatter bursts heard by the logging stationthe number of meteor scatter
	// bursts heard by the logging station
	NrBursts uint32 `protobuf:"varint,11,opt,name=nr_bursts,json=nrBursts,proto3" json:"nr_bursts,omitempty"`
	// the number of meteor scatter pings heard by the logging station
	NrPings uint32 `protobuf:"varint,12,opt,name=nr_pings,json=nrPings,proto3" json:"nr_pings,omitempty"`
	// satellite mode
	SatMode string `protobuf:"bytes,9,opt,name=sat_mode,json=satMode,proto3" json:"sat_mode,omitempty"`
	// name of satellite
	SatName string `protobuf:"bytes,10,opt,name=sat_name,json=satName,proto3" json:"sat_name,omitempty"`
}

func (x *Propagation) Reset() {
	*x = Propagation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Propagation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Propagation) ProtoMessage() {}

func (x *Propagation) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Propagation.ProtoReflect.Descriptor instead.
func (*Propagation) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{4}
}

func (x *Propagation) GetPropagationMode() string {
	if x != nil {
		return x.PropagationMode
	}
	return ""
}

func (x *Propagation) GetAIndex() uint32 {
	if x != nil {
		return x.AIndex
	}
	return 0
}

func (x *Propagation) GetKIndex() uint32 {
	if x != nil {
		return x.KIndex
	}
	return 0
}

func (x *Propagation) GetSolarFluxIndex() uint32 {
	if x != nil {
		return x.SolarFluxIndex
	}
	return 0
}

func (x *Propagation) GetAntPath() string {
	if x != nil {
		return x.AntPath
	}
	return ""
}

func (x *Propagation) GetForceInit() bool {
	if x != nil {
		return x.ForceInit
	}
	return false
}

func (x *Propagation) GetMaxBursts() uint32 {
	if x != nil {
		return x.MaxBursts
	}
	return 0
}

func (x *Propagation) GetMeteorShowerName() string {
	if x != nil {
		return x.MeteorShowerName
	}
	return ""
}

func (x *Propagation) GetNrBursts() uint32 {
	if x != nil {
		return x.NrBursts
	}
	return 0
}

func (x *Propagation) GetNrPings() uint32 {
	if x != nil {
		return x.NrPings
	}
	return 0
}

func (x *Propagation) GetSatMode() string {
	if x != nil {
		return x.SatMode
	}
	return ""
}

func (x *Propagation) GetSatName() string {
	if x != nil {
		return x.SatName
	}
	return ""
}

// QSO fields that are relevant to contests only
type ContestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contest Identifier
	ContestId string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	// contest QSO transmitted serial number
	SerialSent string `protobuf:"bytes,2,opt,name=serial_sent,json=serialSent,proto3" json:"serial_sent,omitempty"`
	// contest QSO received serial number
	SerialReceived string `protobuf:"bytes,3,opt,name=serial_received,json=serialReceived,proto3" json:"serial_received,omitempty"`
	// ARRL section
	ArrlSection string `protobuf:"bytes,4,opt,name=arrl_section,json=arrlSection,proto3" json:"arrl_section,omitempty"`
	// contest class (e.g. for ARRL Field Day)
	StationClass string `protobuf:"bytes,5,opt,name=station_class,json=stationClass,proto3" json:"station_class,omitempty"`
	// contest check (e.g. for ARRL Sweepstakes)
	Check string `protobuf:"bytes,6,opt,name=check,proto3" json:"check,omitempty"`
	// contest precedence (e.g. for ARRL Sweepstakes)
	Precedence string `protobuf:"bytes,7,opt,name=precedence,proto3" json:"precedence,omitempty"`
}

func (x *ContestData) Reset() {
	*x = ContestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestData) ProtoMessage() {}

func (x *ContestData) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestData.ProtoReflect.Descriptor instead.
func (*ContestData) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{5}
}

func (x *ContestData) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ContestData) GetSerialSent() string {
	if x != nil {
		return x.SerialSent
	}
	return ""
}

func (x *ContestData) GetSerialReceived() string {
	if x != nil {
		return x.SerialReceived
	}
	return ""
}

func (x *ContestData) GetArrlSection() string {
	if x != nil {
		return x.ArrlSection
	}
	return ""
}

func (x *ContestData) GetStationClass() string {
	if x != nil {
		return x.StationClass
	}
	return ""
}

func (x *ContestData) GetCheck() string {
	if x != nil {
		return x.Check
	}
	return ""
}

func (x *ContestData) GetPrecedence() string {
	if x != nil {
		return x.Precedence
	}
	return ""
}

// data about using this QSO for award credit
type Credit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credit    string `protobuf:"bytes,1,opt,name=credit,proto3" json:"credit,omitempty"`
	QslMedium string `protobuf:"bytes,2,opt,name=qsl_medium,json=qslMedium,proto3" json:"qsl_medium,omitempty"`
}

func (x *Credit) Reset() {
	*x = Credit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credit) ProtoMessage() {}

func (x *Credit) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credit.ProtoReflect.Descriptor instead.
func (*Credit) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{6}
}

func (x *Credit) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *Credit) GetQslMedium() string {
	if x != nil {
		return x.QslMedium
	}
	return ""
}

// data about uploading this QSO to online logbook sites
type Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadDate   *timestamp.Timestamp `protobuf:"bytes,1,opt,name=upload_date,json=uploadDate,proto3" json:"upload_date,omitempty"`
	UploadStatus UploadStatus         `protobuf:"varint,2,opt,name=upload_status,json=uploadStatus,proto3,enum=adif.UploadStatus" json:"upload_status,omitempty"`
}

func (x *Upload) Reset() {
	*x = Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upload) ProtoMessage() {}

func (x *Upload) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upload.ProtoReflect.Descriptor instead.
func (*Upload) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{7}
}

func (x *Upload) GetUploadDate() *timestamp.Timestamp {
	if x != nil {
		return x.UploadDate
	}
	return nil
}

func (x *Upload) GetUploadStatus() UploadStatus {
	if x != nil {
		return x.UploadStatus
	}
	return UploadStatus_UNKNOWN
}

// QSL data about confirmation of this contact
type Qsl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// date QSL sent
	SentDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=sent_date,json=sentDate,proto3" json:"sent_date,omitempty"`
	// QSL sent status
	SentStatus string `protobuf:"bytes,2,opt,name=sent_status,json=sentStatus,proto3" json:"sent_status,omitempty"`
	// if QSL_SENT is set to 'Y', the means by which the QSL was sent by the logging station;
	// otherwise, the means by which the logging station intends to convey the QSL
	SentVia string `protobuf:"bytes,3,opt,name=sent_via,json=sentVia,proto3" json:"sent_via,omitempty"`
	// date QSL received
	ReceivedDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
	// QSL received status
	ReceivedStatus string `protobuf:"bytes,5,opt,name=received_status,json=receivedStatus,proto3" json:"received_status,omitempty"`
	// if QSL_RCVD is set to 'Y' or 'V', the means by which the QSL was received by the logging
	// station; otherwise, the means by which the logging station requested or intends to request that
	// the QSL be conveyed.
	ReceivedVia string `protobuf:"bytes,6,opt,name=received_via,json=receivedVia,proto3" json:"received_via,omitempty"`
	// QSL card message
	ReceivedMessage string `protobuf:"bytes,7,opt,name=received_message,json=receivedMessage,proto3" json:"received_message,omitempty"`
}

func (x *Qsl) Reset() {
	*x = Qsl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adif_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qsl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qsl) ProtoMessage() {}

func (x *Qsl) ProtoReflect() protoreflect.Message {
	mi := &file_adif_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qsl.ProtoReflect.Descriptor instead.
func (*Qsl) Descriptor() ([]byte, []int) {
	return file_adif_proto_rawDescGZIP(), []int{8}
}

func (x *Qsl) GetSentDate() *timestamp.Timestamp {
	if x != nil {
		return x.SentDate
	}
	return nil
}

func (x *Qsl) GetSentStatus() string {
	if x != nil {
		return x.SentStatus
	}
	return ""
}

func (x *Qsl) GetSentVia() string {
	if x != nil {
		return x.SentVia
	}
	return ""
}

func (x *Qsl) GetReceivedDate() *timestamp.Timestamp {
	if x != nil {
		return x.ReceivedDate
	}
	return nil
}

func (x *Qsl) GetReceivedStatus() string {
	if x != nil {
		return x.ReceivedStatus
	}
	return ""
}

func (x *Qsl) GetReceivedVia() string {
	if x != nil {
		return x.ReceivedVia
	}
	return ""
}

func (x *Qsl) GetReceivedMessage() string {
	if x != nil {
		return x.ReceivedMessage
	}
	return ""
}

var File_adif_proto protoreflect.FileDescriptor

var file_adif_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x64,
	0x69, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x04, 0x41, 0x64, 0x69, 0x66, 0x12, 0x24, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x64,
	0x69, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x04, 0x71, 0x73, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x51, 0x73, 0x6f, 0x52, 0x04, 0x71, 0x73, 0x6f, 0x73,
	0x22, 0xbc, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x64, 0x69, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x64, 0x69, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xcb, 0x09, 0x0a, 0x03, 0x51, 0x73, 0x6f, 0x12, 0x36, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x64, 0x69,
	0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x64, 0x52, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x72, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x66, 0x72, 0x65, 0x71, 0x52, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x12, 0x35,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x77, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x77, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x64, 0x69,
	0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x6c, 0x6f, 0x67, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x6c, 0x6f, 0x67, 0x12, 0x24, 0x0a, 0x06, 0x68, 0x64, 0x72,
	0x6c, 0x6f, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x64, 0x69, 0x66,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x68, 0x64, 0x72, 0x6c, 0x6f, 0x67, 0x12,
	0x24, 0x0a, 0x06, 0x71, 0x72, 0x7a, 0x63, 0x6f, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x71,
	0x72, 0x7a, 0x63, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x04, 0x65, 0x71, 0x73, 0x6c, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x51, 0x73, 0x6c, 0x52, 0x04,
	0x65, 0x71, 0x73, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x6c, 0x6f, 0x74, 0x77, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x51, 0x73, 0x6c, 0x52, 0x04, 0x6c,
	0x6f, 0x74, 0x77, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x51, 0x73, 0x6c, 0x52, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x69, 0x66, 0x2e, 0x51,
	0x73, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x08,
	0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x72, 0x69, 0x64, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x5f, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x41, 0x7a, 0x69, 0x6d, 0x75, 0x74,
	0x68, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x73, 0x6c, 0x5f, 0x76, 0x69, 0x61, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x73, 0x6c, 0x56, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x78, 0x63,
	0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x78, 0x63, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x77, 0x65, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x71, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x71, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x74, 0x75, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x74, 0x75, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x72, 0x63, 0x5f,
	0x64, 0x6f, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x72, 0x63, 0x44,
	0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x73, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x69, 0x73, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x73, 0x74,
	0x73, 0x5f, 0x63, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x73, 0x74,
	0x73, 0x43, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6f, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6f, 0x74, 0x61, 0x5f,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x69, 0x6f, 0x74, 0x61, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x66, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x66, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x63, 0x63, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x5f, 0x74, 0x65, 0x6e, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x54, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x73, 0x61, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x61, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6b, 0x73, 0x6d, 0x67, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x75, 0x6b, 0x73, 0x6d, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x75, 0x63,
	0x63, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x75, 0x63, 0x63, 0x47, 0x72, 0x69, 0x64, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6b,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x66,
	0x6c, 0x75, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x46, 0x6c, 0x75, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x65,
	0x6f, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x65, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x77,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3f, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x73, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x73, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x22, 0x7e, 0x0a, 0x06,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x69,
	0x66, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x02, 0x0a,
	0x03, 0x51, 0x73, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x61, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x76, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x56, 0x69, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x5e, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x50,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x03, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x61, 0x64, 0x69, 0x66, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_adif_proto_rawDescOnce sync.Once
	file_adif_proto_rawDescData = file_adif_proto_rawDesc
)

func file_adif_proto_rawDescGZIP() []byte {
	file_adif_proto_rawDescOnce.Do(func() {
		file_adif_proto_rawDescData = protoimpl.X.CompressGZIP(file_adif_proto_rawDescData)
	})
	return file_adif_proto_rawDescData
}

var file_adif_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_adif_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_adif_proto_goTypes = []interface{}{
	(UploadStatus)(0),           // 0: adif.UploadStatus
	(*Adif)(nil),                // 1: adif.Adif
	(*Header)(nil),              // 2: adif.Header
	(*Qso)(nil),                 // 3: adif.Qso
	(*Station)(nil),             // 4: adif.Station
	(*Propagation)(nil),         // 5: adif.Propagation
	(*ContestData)(nil),         // 6: adif.ContestData
	(*Credit)(nil),              // 7: adif.Credit
	(*Upload)(nil),              // 8: adif.Upload
	(*Qsl)(nil),                 // 9: adif.Qsl
	nil,                         // 10: adif.Qso.AppDefinedEntry
	(*timestamp.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_adif_proto_depIdxs = []int32{
	2,  // 0: adif.Adif.header:type_name -> adif.Header
	3,  // 1: adif.Adif.qsos:type_name -> adif.Qso
	11, // 2: adif.Header.created_timestamp:type_name -> google.protobuf.Timestamp
	4,  // 3: adif.Qso.logging_station:type_name -> adif.Station
	4,  // 4: adif.Qso.contacted_station:type_name -> adif.Station
	5,  // 5: adif.Qso.propagation:type_name -> adif.Propagation
	11, // 6: adif.Qso.time_on:type_name -> google.protobuf.Timestamp
	11, // 7: adif.Qso.time_off:type_name -> google.protobuf.Timestamp
	6,  // 8: adif.Qso.contest:type_name -> adif.ContestData
	7,  // 9: adif.Qso.credit_submitted:type_name -> adif.Credit
	7,  // 10: adif.Qso.credit_granted:type_name -> adif.Credit
	8,  // 11: adif.Qso.clublog:type_name -> adif.Upload
	8,  // 12: adif.Qso.hdrlog:type_name -> adif.Upload
	8,  // 13: adif.Qso.qrzcom:type_name -> adif.Upload
	9,  // 14: adif.Qso.eqsl:type_name -> adif.Qsl
	9,  // 15: adif.Qso.lotw:type_name -> adif.Qsl
	9,  // 16: adif.Qso.card:type_name -> adif.Qsl
	10, // 17: adif.Qso.app_defined:type_name -> adif.Qso.AppDefinedEntry
	11, // 18: adif.Upload.upload_date:type_name -> google.protobuf.Timestamp
	0,  // 19: adif.Upload.upload_status:type_name -> adif.UploadStatus
	11, // 20: adif.Qsl.sent_date:type_name -> google.protobuf.Timestamp
	11, // 21: adif.Qsl.received_date:type_name -> google.protobuf.Timestamp
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_adif_proto_init() }
func file_adif_proto_init() {
	if File_adif_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_adif_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adif_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adif_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qso); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adif_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Station); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adif_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Propagation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adif_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adif_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adif_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adif_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qsl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adif_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_adif_proto_goTypes,
		DependencyIndexes: file_adif_proto_depIdxs,
		EnumInfos:         file_adif_proto_enumTypes,
		MessageInfos:      file_adif_proto_msgTypes,
	}.Build()
	File_adif_proto = out.File
	file_adif_proto_rawDesc = nil
	file_adif_proto_goTypes = nil
	file_adif_proto_depIdxs = nil
}
